;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define START 0xFF
;#define ID1 0x01
;#define ID2 0x02
;#define ID3 0x03
;#define ID4 0x04
;#define ID5 0x05
;#define ID6 0x06
;#define ID7 0x07
;#define ID8 0x08
;#define LENGTH 0x07
;#define INSTR_WRITE 0x03
;#define ADDRESS 0x1E
;
;#define LENGTH_MOV 0x04
;#define INSTR_WRITE_READ 0x02
;#define ADDRESS_MOV 0x2E
;#define LENGTH_MOV_READ 0x01//iscitavma jedan char
;
;#define LENGTH_ERROR 0x02
;#define INSTR_WRITE_ERROR 0x01
;
;#define ADDRESS_POS 0x24
;#define LENGTH_POS_READ 0x02
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#define TXC 6
;
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 0044 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0045 char status,data;
; 0000 0046 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 0047       {
; 0000 0048       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0049       data=UDR1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004A       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004B          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004C       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004D }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 0053 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0054 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0055 UDR1=c;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0056 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;unsigned char brzina_servo_H, brzina_servo_L, ugao_servo_H, ugao_servo_L;
;unsigned char sum=0;
;unsigned char checksum=0;
;unsigned char greska;
;unsigned char IdServoGreska;
;char paket1, paket2, paket4, paket6, paket7, moving, positionLow='L', positionHigh='H';

	.DSEG
;
;void prijem_paketa (void)
; 0000 0065 {

	.CSEG
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0066     paket1=getchar();
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0067     paket2=getchar();
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0068     IdServoGreska=getchar();
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0069     paket4=getchar();
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006A     greska=getchar();
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006B     paket6=getchar();
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006C }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void prijem_paketaMoving(void)
; 0000 006F {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0070     paket1=getchar();
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0071     paket2=getchar();
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0072     IdServoGreska=getchar();
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0073     paket4=getchar();
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0074     greska=getchar();
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0075     moving=getchar();
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0076     paket7=getchar();
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0077 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void prijem_paketaPosition(void)
; 0000 007A {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007B     paket1=getchar();
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007C     paket2=getchar();
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007D     IdServoGreska=getchar();
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007E     paket4=getchar();
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 007F     greska=getchar();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0080     positionLow=getchar();
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0081 	positionHigh=getchar();
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0082     paket7=getchar();
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0083 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void blokiranje_predaje (void)                        //funkcija koja blokira predaju u trenutku kada
; 0000 0086 {                                                      // posaljemo ceo paket
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0087     while ( !( UCSR0A & (1<<TXC)) )   ;    //kada se posalje ceo paket onda se bit 6 registra UCSRA
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0088     UCSR0B.3=0;                            // setuje na 1, potom se UCSRB.3 stavlja na 0, a to je bit koji
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0089     UCSR0A.6=1;                            //iskljuci TxD i taj pin pinovo postaje PD1, a on je inicijalizovan
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 008A }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;void oslobadjanje_predaje (void)                 //proizvodjaca mikrokontrolera (datasheet 148 strana)
; 0000 008D {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 008E     UCSR0B.3=1;                            //TxD se opet ukljucuje tako sto se UCSRB.3 bit setuje
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 008F }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;                                                 //proizvodjaca mikrokontrolera (datasheet 148 strana)
;void oslobadjanje_prijema (void)
; 0000 0092 {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0093     UCSR0B.4=1;                         // bit koji kontrolise oslobadjanje i blokiranje prijema
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0094 }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;
;void blokiranje_prijema (void)
; 0000 0097 {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0098     UCSR0B.4=0;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0099 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;/*********************FUNKCIJE SERVOI*********************/
;void servo_func(short pozicija1,short brzina1)
; 0000 009D {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009E     ugao_servo_H=(char)(pozicija1>>8);
;	pozicija1 -> Y+2
;	brzina1 -> Y+0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009F     ugao_servo_L=(char)(pozicija1&0x00FF);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A0 
; 0000 00A1     brzina_servo_H=(char)(brzina1>>8);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A2     brzina_servo_L=(char)(brzina1&0x00FF);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A3 
; 0000 00A4     sum=0x28 + ID1 + brzina_servo_H + brzina_servo_L + ugao_servo_H + ugao_servo_L;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A5     checksum=~sum;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A6 
; 0000 00A7     blokiranje_prijema();
;PCODE: $000000A1 VOL: 0
; 0000 00A8     oslobadjanje_predaje();
;PCODE: $000000A2 VOL: 0
; 0000 00A9 
; 0000 00AA     putchar(START);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00AB     putchar(START);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00AC     putchar(ID1);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00AD     putchar(LENGTH);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00AE     putchar(INSTR_WRITE);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00AF     putchar(ADDRESS);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B0     putchar(ugao_servo_L);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00B1     putchar(ugao_servo_H);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00B2     putchar(brzina_servo_L);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B3     putchar(brzina_servo_H);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B4     putchar(checksum);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00B5 
; 0000 00B6     blokiranje_predaje();
;PCODE: $000000BF VOL: 0
; 0000 00B7     oslobadjanje_prijema();
;PCODE: $000000C0 VOL: 0
; 0000 00B8 
; 0000 00B9     prijem_paketa();
;PCODE: $000000C1 VOL: 0
; 0000 00BA 
; 0000 00BB     oslobadjanje_predaje();
;PCODE: $000000C2 VOL: 0
; 0000 00BC }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;
;
;/*******************MOVING****************************/
;void servo_moving_func(int IdServoa) //slanje poruke za dobijanja stanja moving
; 0000 00C1 {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00C2     sum = IdServoa+LENGTH_MOV+INSTR_WRITE_READ+ADDRESS_MOV+LENGTH_MOV_READ;//suma iinfo=2xStart+id+lenght+iw+add
;	IdServoa -> Y+0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00C3     checksum=~sum;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C4 
; 0000 00C5     blokiranje_prijema();
;PCODE: $000000CE VOL: 0
; 0000 00C6     oslobadjanje_predaje();
;PCODE: $000000CF VOL: 0
; 0000 00C7 
; 0000 00C8     putchar(START);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00C9     putchar(START);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00CA     putchar(IdServoa);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00CB     putchar(LENGTH_MOV);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00CC     putchar(INSTR_WRITE_READ);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00CD     putchar(ADDRESS_MOV);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00CE     putchar(LENGTH_MOV_READ);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00CF     putchar(checksum);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00D0 
; 0000 00D1     blokiranje_predaje();
;PCODE: $000000E7 VOL: 0
; 0000 00D2     oslobadjanje_prijema();
;PCODE: $000000E8 VOL: 0
; 0000 00D3 
; 0000 00D4     prijem_paketaMoving();
;PCODE: $000000E9 VOL: 0
; 0000 00D5 
; 0000 00D6     oslobadjanje_predaje();
;PCODE: $000000EA VOL: 0
; 0000 00D7 }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;void servo_position_func(int IdServoa) //slanje poruke za dobijanja stanja moving
; 0000 00D9 {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00DA     sum = IdServoa+LENGTH_MOV+INSTR_WRITE_READ+ADDRESS_POS+LENGTH_POS_READ;//suma iinfo=2xStart+id+lenght+iw+add
;	IdServoa -> Y+0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00DB     checksum=~sum;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00DC 
; 0000 00DD     blokiranje_prijema();
;PCODE: $000000F6 VOL: 0
; 0000 00DE     oslobadjanje_predaje();
;PCODE: $000000F7 VOL: 0
; 0000 00DF 
; 0000 00E0     putchar(START);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E1     putchar(START);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00E2     putchar(IdServoa);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00E3     putchar(LENGTH_MOV);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00E4     putchar(INSTR_WRITE_READ);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00E5     putchar(ADDRESS_POS);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00E6     putchar(LENGTH_POS_READ);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00E7     putchar(checksum);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00E8 
; 0000 00E9     blokiranje_predaje();
;PCODE: $0000010F VOL: 0
; 0000 00EA     oslobadjanje_prijema();
;PCODE: $00000110 VOL: 0
; 0000 00EB 
; 0000 00EC     prijem_paketaPosition();
;PCODE: $00000111 VOL: 0
; 0000 00ED 
; 0000 00EE     oslobadjanje_predaje();
;PCODE: $00000112 VOL: 0
; 0000 00EF }
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;
;void servo1_moving_func(unsigned int parametar1)
; 0000 00F2 {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00F3     servo_moving_func(1);
;	parametar1 -> Y+0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00F4 
; 0000 00F5     if(moving==1)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00F6         putchar1('z');
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00F7     else if(moving == 0)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00F8         putchar1('x');
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F9 
; 0000 00FA }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;  // External Interrupt 7 service routine
;interrupt [EXT_INT7] void ext_int7_isr(void)
; 0000 00FE {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00FF servo_position_func(1);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0100 putchar1(positionLow);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0101 putchar1(positionHigh);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0102 
; 0000 0103 }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;
;void main(void)
; 0000 0106 {
;PCODE: $0000013C VOL: 0
; 0000 0107 
; 0000 0108 moving = 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0109 
; 0000 010A // Input/Output Ports initialization
; 0000 010B // Port A initialization
; 0000 010C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 010D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 010E PORTA=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 010F DDRA=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0110 
; 0000 0111 // Port B initialization
; 0000 0112 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0113 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0114 PORTB=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0115 DDRB=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0116 
; 0000 0117 // Port C initialization
; 0000 0118 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0119 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 011A PORTC=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 011B DDRC=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 011C 
; 0000 011D // Port D initialization
; 0000 011E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 011F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0120 PORTD=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0121 DDRD=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0122 
; 0000 0123 // Port E initialization
; 0000 0124 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0125 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0126 PORTE=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0127 DDRE=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0128 
; 0000 0129 // Port F initialization
; 0000 012A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 012B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 012C PORTF=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 012D DDRF=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 012E 
; 0000 012F // Port G initialization
; 0000 0130 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0131 // State4=T State3=T State2=T State1=T State0=T
; 0000 0132 PORTG=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0133 DDRG=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0134 
; 0000 0135 // Timer/Counter 0 initialization
; 0000 0136 // Clock source: System Clock
; 0000 0137 // Clock value: Timer 0 Stopped
; 0000 0138 // Mode: Normal top=0xFF
; 0000 0139 // OC0 output: Disconnected
; 0000 013A ASSR=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 013B TCCR0=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 013C TCNT0=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 013D OCR0=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 013E 
; 0000 013F // Timer/Counter 1 initialization
; 0000 0140 // Clock source: System Clock
; 0000 0141 // Clock value: Timer1 Stopped
; 0000 0142 // Mode: Normal top=0xFFFF
; 0000 0143 // OC1A output: Discon.
; 0000 0144 // OC1B output: Discon.
; 0000 0145 // OC1C output: Discon.
; 0000 0146 // Noise Canceler: Off
; 0000 0147 // Input Capture on Falling Edge
; 0000 0148 // Timer1 Overflow Interrupt: Off
; 0000 0149 // Input Capture Interrupt: Off
; 0000 014A // Compare A Match Interrupt: Off
; 0000 014B // Compare B Match Interrupt: Off
; 0000 014C // Compare C Match Interrupt: Off
; 0000 014D TCCR1A=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 014E TCCR1B=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 014F TCNT1H=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0150 TCNT1L=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0151 ICR1H=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0152 ICR1L=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0153 OCR1AH=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0154 OCR1AL=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0155 OCR1BH=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0156 OCR1BL=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0157 OCR1CH=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0158 OCR1CL=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0159 
; 0000 015A // Timer/Counter 2 initialization
; 0000 015B // Clock source: System Clock
; 0000 015C // Clock value: Timer2 Stopped
; 0000 015D // Mode: Normal top=0xFF
; 0000 015E // OC2 output: Disconnected
; 0000 015F TCCR2=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0160 TCNT2=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0161 OCR2=0x00;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0162 
; 0000 0163 // Timer/Counter 3 initialization
; 0000 0164 // Clock source: System Clock
; 0000 0165 // Clock value: Timer3 Stopped
; 0000 0166 // Mode: Normal top=0xFFFF
; 0000 0167 // OC3A output: Discon.
; 0000 0168 // OC3B output: Discon.
; 0000 0169 // OC3C output: Discon.
; 0000 016A // Noise Canceler: Off
; 0000 016B // Input Capture on Falling Edge
; 0000 016C // Timer3 Overflow Interrupt: Off
; 0000 016D // Input Capture Interrupt: Off
; 0000 016E // Compare A Match Interrupt: Off
; 0000 016F // Compare B Match Interrupt: Off
; 0000 0170 // Compare C Match Interrupt: Off
; 0000 0171 TCCR3A=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0172 TCCR3B=0x00;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0173 TCNT3H=0x00;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0174 TCNT3L=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0175 ICR3H=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0176 ICR3L=0x00;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0177 OCR3AH=0x00;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0178 OCR3AL=0x00;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0179 OCR3BH=0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 017A OCR3BL=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 017B OCR3CH=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 017C OCR3CL=0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 017D 
; 0000 017E // External Interrupt(s) initialization
; 0000 017F // INT0: Off
; 0000 0180 // INT1: Off
; 0000 0181 // INT2: Off
; 0000 0182 // INT3: Off
; 0000 0183 // INT4: Off
; 0000 0184 // INT5: Off
; 0000 0185 // INT6: On
; 0000 0186 // INT6 Mode: Any change
; 0000 0187 // INT7: On
; 0000 0188 // INT7 Mode: Any change
; 0000 0189 EICRA=0x00;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 018A EICRB=0x00;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 018B EIMSK=0xC0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 018C EIFR=0xC0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 018D 
; 0000 018E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 018F TIMSK=0x00;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0190 
; 0000 0191 ETIMSK=0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0192 
; 0000 0193 // USART0 initialization
; 0000 0194 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0195 // USART0 Receiver: On
; 0000 0196 // USART0 Transmitter: On
; 0000 0197 // USART0 Mode: Asynchronous
; 0000 0198 // USART0 Baud Rate: 115200
; 0000 0199 UCSR0A=0x00;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 019A UCSR0B=0x18;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 019B UCSR0C=0x06;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 019C UBRR0H=0x00;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 019D UBRR0L=0x05;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 019E 
; 0000 019F // USART1 initialization
; 0000 01A0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01A1 // USART1 Receiver: On
; 0000 01A2 // USART1 Transmitter: On
; 0000 01A3 // USART1 Mode: Asynchronous
; 0000 01A4 // USART1 Baud Rate: 115200
; 0000 01A5 UCSR1A=0x00;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 01A6 UCSR1B=0x18;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 01A7 UCSR1C=0x06;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 01A8 UBRR1H=0x00;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 01A9 UBRR1L=0x05;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 01AA 
; 0000 01AB // Analog Comparator initialization
; 0000 01AC // Analog Comparator: Off
; 0000 01AD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01AE ACSR=0x80;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 01AF SFIOR=0x00;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 01B0 
; 0000 01B1 // ADC initialization
; 0000 01B2 // ADC disabled
; 0000 01B3 ADCSRA=0x00;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 01B4 
; 0000 01B5 // SPI initialization
; 0000 01B6 // SPI disabled
; 0000 01B7 SPCR=0x00;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 01B8 
; 0000 01B9 // TWI initialization
; 0000 01BA // TWI disabled
; 0000 01BB TWCR=0x00;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 01BC 
; 0000 01BD // Global enable interrupts
; 0000 01BE #asm("sei")
;PCODE: $000001C3 VOL: 0
	sei
;PCODE: $000001C4 VOL: 0
; 0000 01BF while (1)
;PCODE: $000001C5 VOL: 0
; 0000 01C0       {
; 0000 01C1         servo_func(500, 120);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 01C2           delay_ms(800);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 01C3         putchar1(positionLow);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 01C4         servo_func(180,120);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 01C5         delay_ms(800);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 01C6       }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 01C7 }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
