
AVRASM ver. 2.1.30  C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm Wed Jan 28 14:07:55 2015

C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1065): warning: Register r9 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1066): warning: Register r8 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1067): warning: Register r11 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1068): warning: Register r10 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1069): warning: Register r13 already defined by the .DEF directive
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1070): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 11,059000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _brzina_servo_H=R5
                 	.DEF _brzina_servo_L=R4
                 	.DEF _ugao_servo_H=R7
                 	.DEF _ugao_servo_L=R6
                 	.DEF _sum=R9
                 	.DEF _checksum=R8
                 	.DEF _greska=R11
                 	.DEF _IdServoGreska=R10
                 	.DEF _paket1=R13
                 	.DEF _paket2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0100 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0xD:
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1122): warning: .cseg .db misalignment - padding zero byte
00004f 004c      	.DB  0x4C
                 _0xE:
C:\Users\Predrag\Desktop\servoi - position - kopija\List\servoi.asm(1124): warning: .cseg .db misalignment - padding zero byte
000050 0048      	.DB  0x48
                 _0x24:
000051 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000052 0001      	.DW  0x01
000053 0504      	.DW  _positionLow
000054 009e      	.DW  _0xD*2
                 
000055 0001      	.DW  0x01
000056 0505      	.DW  _positionHigh
000057 00a0      	.DW  _0xE*2
                 
000058 0002      	.DW  0x02
000059 0008      	.DW  0x08
00005a 00a2      	.DW  _0x24*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
000062 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000064 e1f8      	LDI  R31,0x18
000065 bdf1      	OUT  WDTCR,R31
000066 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000067 e08d      	LDI  R24,(14-2)+1
000068 e0a2      	LDI  R26,2
000069 27bb      	CLR  R27
                 __CLEAR_REG:
00006a 93ed      	ST   X+,R30
00006b 958a      	DEC  R24
00006c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006e e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006f e0a0      	LDI  R26,LOW(__SRAM_START)
000070 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000071 93ed      	ST   X+,R30
000072 9701      	SBIW R24,1
000073 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000074 eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000075 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000076 9185      	LPM  R24,Z+
000077 9195      	LPM  R25,Z+
000078 9700      	SBIW R24,0
000079 f061      	BREQ __GLOBAL_INI_END
00007a 91a5      	LPM  R26,Z+
00007b 91b5      	LPM  R27,Z+
00007c 9005      	LPM  R0,Z+
00007d 9015      	LPM  R1,Z+
00007e 01bf      	MOVW R22,R30
00007f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000080 9005      	LPM  R0,Z+
000081 920d      	ST   X+,R0
000082 9701      	SBIW R24,1
000083 f7e1      	BRNE __GLOBAL_INI_LOOP
000084 01fb      	MOVW R30,R22
000085 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000086 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 0128 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define START 0xFF
                 ;#define ID1 0x01
                 ;#define ID2 0x02
                 ;#define ID3 0x03
                 ;#define ID4 0x04
                 ;#define ID5 0x05
                 ;#define ID6 0x06
                 ;#define ID7 0x07
                 ;#define ID8 0x08
                 ;#define LENGTH 0x07
                 ;#define INSTR_WRITE 0x03
                 ;#define ADDRESS 0x1E
                 ;
                 ;#define LENGTH_MOV 0x04
                 ;#define INSTR_WRITE_READ 0x02
                 ;#define ADDRESS_MOV 0x2E
                 ;#define LENGTH_MOV_READ 0x01//iscitavma jedan char
                 ;
                 ;#define LENGTH_ERROR 0x02
                 ;#define INSTR_WRITE_ERROR 0x01
                 ;
                 ;#define ADDRESS_POS 0x24
                 ;#define LENGTH_POS_READ 0x02
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#define TXC 6
                 ;
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// Get a character from the USART1 Receiver
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 0044 {
                 
                 	.CSEG
                 ; 0000 0045 char status,data;
                 ; 0000 0046 while (1)
                 ;	status -> R17
                 ;	data -> R16
                 ; 0000 0047       {
                 ; 0000 0048       while (((status=UCSR1A) & RX_COMPLETE)==0);
                 ; 0000 0049       data=UDR1;
                 ; 0000 004A       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
                 ; 0000 004B          return data;
                 ; 0000 004C       }
                 ; 0000 004D }
                 ;#pragma used-
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 0053 {
                 _putchar1:
                 ; 0000 0054 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 _0xA:
00008f 91e0 009b 	LDS  R30,155
000091 72e0      	ANDI R30,LOW(0x20)
000092 f3e1      	BREQ _0xA
                 ; 0000 0055 UDR1=c;
000093 81e8      	LD   R30,Y
000094 93e0 009c 	STS  156,R30
                 ; 0000 0056 }
000096 940c 01ad 	JMP  _0x2060001
                 ;#pragma used-
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;unsigned char brzina_servo_H, brzina_servo_L, ugao_servo_H, ugao_servo_L;
                 ;unsigned char sum=0;
                 ;unsigned char checksum=0;
                 ;unsigned char greska;
                 ;unsigned char IdServoGreska;
                 ;char paket1, paket2, paket4, paket6, paket7, moving, positionLow='L', positionHigh='H';
                 
                 	.DSEG
                 ;
                 ;void prijem_paketa (void)
                 ; 0000 0065 {
                 
                 	.CSEG
                 _prijem_paketa:
                 ; 0000 0066     paket1=getchar();
000098 940e 01af 	CALL SUBOPT_0x0
                 ; 0000 0067     paket2=getchar();
                 ; 0000 0068     IdServoGreska=getchar();
                 ; 0000 0069     paket4=getchar();
                 ; 0000 006A     greska=getchar();
                 ; 0000 006B     paket6=getchar();
00009a 93e0 0501 	STS  _paket6,R30
                 ; 0000 006C }
00009c 9508      	RET
                 ;
                 ;void prijem_paketaMoving(void)
                 ; 0000 006F {
                 ; 0000 0070     paket1=getchar();
                 ; 0000 0071     paket2=getchar();
                 ; 0000 0072     IdServoGreska=getchar();
                 ; 0000 0073     paket4=getchar();
                 ; 0000 0074     greska=getchar();
                 ; 0000 0075     moving=getchar();
                 ; 0000 0076     paket7=getchar();
                 ; 0000 0077 }
                 ;
                 ;void prijem_paketaPosition(void)
                 ; 0000 007A {
                 _prijem_paketaPosition:
                 ; 0000 007B     paket1=getchar();
00009d 940e 01af 	CALL SUBOPT_0x0
                 ; 0000 007C     paket2=getchar();
                 ; 0000 007D     IdServoGreska=getchar();
                 ; 0000 007E     paket4=getchar();
                 ; 0000 007F     greska=getchar();
                 ; 0000 0080     positionLow=getchar();
00009f 93e0 0504 	STS  _positionLow,R30
                 ; 0000 0081 	positionHigh=getchar();
0000a1 d103      	RCALL _getchar
0000a2 93e0 0505 	STS  _positionHigh,R30
                 ; 0000 0082     paket7=getchar();
0000a4 d100      	RCALL _getchar
0000a5 93e0 0502 	STS  _paket7,R30
                 ; 0000 0083 }
0000a7 9508      	RET
                 ;
                 ;void blokiranje_predaje (void)                        //funkcija koja blokira predaju u trenutku kada
                 ; 0000 0086 {                                                      // posaljemo ceo paket
                 _blokiranje_predaje:
                 ; 0000 0087     while ( !( UCSR0A & (1<<TXC)) )   ;    //kada se posalje ceo paket onda se bit 6 registra UCSRA
                 _0xF:
0000a8 9b5e      	SBIS 0xB,6
0000a9 cffe      	RJMP _0xF
                 ; 0000 0088     UCSR0B.3=0;                            // setuje na 1, potom se UCSRB.3 stavlja na 0, a to je bit koji
0000aa 9853      	CBI  0xA,3
                 ; 0000 0089     UCSR0A.6=1;                            //iskljuci TxD i taj pin pinovo postaje PD1, a on je inicijalizovan
0000ab 9a5e      	SBI  0xB,6
                 ; 0000 008A }
0000ac 9508      	RET
                 ;
                 ;void oslobadjanje_predaje (void)                 //proizvodjaca mikrokontrolera (datasheet 148 strana)
                 ; 0000 008D {
                 _oslobadjanje_predaje:
                 ; 0000 008E     UCSR0B.3=1;                            //TxD se opet ukljucuje tako sto se UCSRB.3 bit setuje
0000ad 9a53      	SBI  0xA,3
                 ; 0000 008F }
0000ae 9508      	RET
                 ;                                                 //proizvodjaca mikrokontrolera (datasheet 148 strana)
                 ;void oslobadjanje_prijema (void)
                 ; 0000 0092 {
                 _oslobadjanje_prijema:
                 ; 0000 0093     UCSR0B.4=1;                         // bit koji kontrolise oslobadjanje i blokiranje prijema
0000af 9a54      	SBI  0xA,4
                 ; 0000 0094 }
0000b0 9508      	RET
                 ;
                 ;void blokiranje_prijema (void)
                 ; 0000 0097 {
                 _blokiranje_prijema:
                 ; 0000 0098     UCSR0B.4=0;
0000b1 9854      	CBI  0xA,4
                 ; 0000 0099 }
0000b2 9508      	RET
                 ;
                 ;/*********************FUNKCIJE SERVOI*********************/
                 ;void servo_func(short pozicija1,short brzina1)
                 ; 0000 009D {
                 _servo_func:
                 ; 0000 009E     ugao_servo_H=(char)(pozicija1>>8);
                 ;	pozicija1 -> Y+2
                 ;	brzina1 -> Y+0
0000b3 81ea      	LDD  R30,Y+2
0000b4 81fb      	LDD  R31,Y+2+1
0000b5 940e 01f4 	CALL __ASRW8
0000b7 2e7e      	MOV  R7,R30
                 ; 0000 009F     ugao_servo_L=(char)(pozicija1&0x00FF);
0000b8 81ea      	LDD  R30,Y+2
0000b9 2e6e      	MOV  R6,R30
                 ; 0000 00A0 
                 ; 0000 00A1     brzina_servo_H=(char)(brzina1>>8);
0000ba 81e8      	LD   R30,Y
0000bb 81f9      	LDD  R31,Y+1
0000bc 940e 01f4 	CALL __ASRW8
0000be 2e5e      	MOV  R5,R30
                 ; 0000 00A2     brzina_servo_L=(char)(brzina1&0x00FF);
0000bf 81e8      	LD   R30,Y
0000c0 2e4e      	MOV  R4,R30
                 ; 0000 00A3 
                 ; 0000 00A4     sum=0x28 + ID1 + brzina_servo_H + brzina_servo_L + ugao_servo_H + ugao_servo_L;
0000c1 2de5      	MOV  R30,R5
0000c2 5de7      	SUBI R30,-LOW(41)
0000c3 0de4      	ADD  R30,R4
0000c4 0de7      	ADD  R30,R7
0000c5 0de6      	ADD  R30,R6
0000c6 940e 01c1 	CALL SUBOPT_0x1
                 ; 0000 00A5     checksum=~sum;
                 ; 0000 00A6 
                 ; 0000 00A7     blokiranje_prijema();
                 ; 0000 00A8     oslobadjanje_predaje();
                 ; 0000 00A9 
                 ; 0000 00AA     putchar(START);
                 ; 0000 00AB     putchar(START);
                 ; 0000 00AC     putchar(ID1);
0000c8 e0e1      	LDI  R30,LOW(1)
0000c9 93ea      	ST   -Y,R30
0000ca 940e 01a9 	CALL _putchar
                 ; 0000 00AD     putchar(LENGTH);
0000cc e0e7      	LDI  R30,LOW(7)
0000cd 93ea      	ST   -Y,R30
0000ce 940e 01a9 	CALL _putchar
                 ; 0000 00AE     putchar(INSTR_WRITE);
0000d0 e0e3      	LDI  R30,LOW(3)
0000d1 93ea      	ST   -Y,R30
0000d2 940e 01a9 	CALL _putchar
                 ; 0000 00AF     putchar(ADDRESS);
0000d4 e1ee      	LDI  R30,LOW(30)
0000d5 93ea      	ST   -Y,R30
0000d6 940e 01a9 	CALL _putchar
                 ; 0000 00B0     putchar(ugao_servo_L);
0000d8 926a      	ST   -Y,R6
0000d9 940e 01a9 	CALL _putchar
                 ; 0000 00B1     putchar(ugao_servo_H);
0000db 927a      	ST   -Y,R7
0000dc 940e 01a9 	CALL _putchar
                 ; 0000 00B2     putchar(brzina_servo_L);
0000de 924a      	ST   -Y,R4
0000df 940e 01a9 	CALL _putchar
                 ; 0000 00B3     putchar(brzina_servo_H);
0000e1 925a      	ST   -Y,R5
0000e2 940e 01d1 	CALL SUBOPT_0x2
                 ; 0000 00B4     putchar(checksum);
                 ; 0000 00B5 
                 ; 0000 00B6     blokiranje_predaje();
                 ; 0000 00B7     oslobadjanje_prijema();
                 ; 0000 00B8 
                 ; 0000 00B9     prijem_paketa();
0000e4 dfb3      	RCALL _prijem_paketa
                 ; 0000 00BA 
                 ; 0000 00BB     oslobadjanje_predaje();
0000e5 dfc7      	RCALL _oslobadjanje_predaje
                 ; 0000 00BC }
0000e6 9624      	ADIW R28,4
0000e7 9508      	RET
                 ;
                 ;
                 ;/*******************MOVING****************************/
                 ;void servo_moving_func(int IdServoa) //slanje poruke za dobijanja stanja moving
                 ; 0000 00C1 {
                 ; 0000 00C2     sum = IdServoa+LENGTH_MOV+INSTR_WRITE_READ+ADDRESS_MOV+LENGTH_MOV_READ;//suma iinfo=2xStart+id+lenght+iw+add
                 ;	IdServoa -> Y+0
                 ; 0000 00C3     checksum=~sum;
                 ; 0000 00C4 
                 ; 0000 00C5     blokiranje_prijema();
                 ; 0000 00C6     oslobadjanje_predaje();
                 ; 0000 00C7 
                 ; 0000 00C8     putchar(START);
                 ; 0000 00C9     putchar(START);
                 ; 0000 00CA     putchar(IdServoa);
                 ; 0000 00CB     putchar(LENGTH_MOV);
                 ; 0000 00CC     putchar(INSTR_WRITE_READ);
                 ; 0000 00CD     putchar(ADDRESS_MOV);
                 ; 0000 00CE     putchar(LENGTH_MOV_READ);
                 ; 0000 00CF     putchar(checksum);
                 ; 0000 00D0 
                 ; 0000 00D1     blokiranje_predaje();
                 ; 0000 00D2     oslobadjanje_prijema();
                 ; 0000 00D3 
                 ; 0000 00D4     prijem_paketaMoving();
                 ; 0000 00D5 
                 ; 0000 00D6     oslobadjanje_predaje();
                 ; 0000 00D7 }
                 ;void servo_position_func(int IdServoa) //slanje poruke za dobijanja stanja moving
                 ; 0000 00D9 {
                 _servo_position_func:
                 ; 0000 00DA     sum = IdServoa+LENGTH_MOV+INSTR_WRITE_READ+ADDRESS_POS+LENGTH_POS_READ;//suma iinfo=2xStart+id+lenght+iw+add
                 ;	IdServoa -> Y+0
0000e8 81e8      	LD   R30,Y
0000e9 5de4      	SUBI R30,-LOW(44)
0000ea 940e 01c1 	CALL SUBOPT_0x1
                 ; 0000 00DB     checksum=~sum;
                 ; 0000 00DC 
                 ; 0000 00DD     blokiranje_prijema();
                 ; 0000 00DE     oslobadjanje_predaje();
                 ; 0000 00DF 
                 ; 0000 00E0     putchar(START);
                 ; 0000 00E1     putchar(START);
                 ; 0000 00E2     putchar(IdServoa);
0000ec 81e8      	LD   R30,Y
0000ed 93ea      	ST   -Y,R30
0000ee d0ba      	RCALL _putchar
                 ; 0000 00E3     putchar(LENGTH_MOV);
0000ef e0e4      	LDI  R30,LOW(4)
0000f0 93ea      	ST   -Y,R30
0000f1 d0b7      	RCALL _putchar
                 ; 0000 00E4     putchar(INSTR_WRITE_READ);
0000f2 e0e2      	LDI  R30,LOW(2)
0000f3 93ea      	ST   -Y,R30
0000f4 d0b4      	RCALL _putchar
                 ; 0000 00E5     putchar(ADDRESS_POS);
0000f5 e2e4      	LDI  R30,LOW(36)
0000f6 93ea      	ST   -Y,R30
0000f7 d0b1      	RCALL _putchar
                 ; 0000 00E6     putchar(LENGTH_POS_READ);
0000f8 e0e2      	LDI  R30,LOW(2)
0000f9 93ea      	ST   -Y,R30
0000fa 940e 01d1 	CALL SUBOPT_0x2
                 ; 0000 00E7     putchar(checksum);
                 ; 0000 00E8 
                 ; 0000 00E9     blokiranje_predaje();
                 ; 0000 00EA     oslobadjanje_prijema();
                 ; 0000 00EB 
                 ; 0000 00EC     prijem_paketaPosition();
0000fc dfa0      	RCALL _prijem_paketaPosition
                 ; 0000 00ED 
                 ; 0000 00EE     oslobadjanje_predaje();
0000fd dfaf      	RCALL _oslobadjanje_predaje
                 ; 0000 00EF }
0000fe 9622      	ADIW R28,2
0000ff 9508      	RET
                 ;
                 ;void servo1_moving_func(unsigned int parametar1)
                 ; 0000 00F2 {
                 ; 0000 00F3     servo_moving_func(1);
                 ;	parametar1 -> Y+0
                 ; 0000 00F4 
                 ; 0000 00F5     if(moving==1)
                 ; 0000 00F6         putchar1('z');
                 ; 0000 00F7     else if(moving == 0)
                 ; 0000 00F8         putchar1('x');
                 ; 0000 00F9 
                 ; 0000 00FA }
                 ;
                 ;  // External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void)
                 ; 0000 00FE {
                 _ext_int7_isr:
000100 920a      	ST   -Y,R0
000101 921a      	ST   -Y,R1
000102 92fa      	ST   -Y,R15
000103 936a      	ST   -Y,R22
000104 937a      	ST   -Y,R23
000105 938a      	ST   -Y,R24
000106 939a      	ST   -Y,R25
000107 93aa      	ST   -Y,R26
000108 93ba      	ST   -Y,R27
000109 93ea      	ST   -Y,R30
00010a 93fa      	ST   -Y,R31
00010b b7ef      	IN   R30,SREG
00010c 93ea      	ST   -Y,R30
                 ; 0000 00FF servo_position_func(1);
00010d e0e1      	LDI  R30,LOW(1)
00010e e0f0      	LDI  R31,HIGH(1)
00010f 93fa      	ST   -Y,R31
000110 93ea      	ST   -Y,R30
000111 dfd6      	RCALL _servo_position_func
                 ; 0000 0100 putchar1(positionLow);
000112 91e0 0504 	LDS  R30,_positionLow
000114 93ea      	ST   -Y,R30
000115 df79      	RCALL _putchar1
                 ; 0000 0101 putchar1(positionHigh);
000116 91e0 0505 	LDS  R30,_positionHigh
000118 93ea      	ST   -Y,R30
000119 df75      	RCALL _putchar1
                 ; 0000 0102 
                 ; 0000 0103 }
00011a 91e9      	LD   R30,Y+
00011b bfef      	OUT  SREG,R30
00011c 91f9      	LD   R31,Y+
00011d 91e9      	LD   R30,Y+
00011e 91b9      	LD   R27,Y+
00011f 91a9      	LD   R26,Y+
000120 9199      	LD   R25,Y+
000121 9189      	LD   R24,Y+
000122 9179      	LD   R23,Y+
000123 9169      	LD   R22,Y+
000124 90f9      	LD   R15,Y+
000125 9019      	LD   R1,Y+
000126 9009      	LD   R0,Y+
000127 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 0106 {
                 _main:
                 ; 0000 0107 
                 ; 0000 0108 moving = 0;
000128 e0e0      	LDI  R30,LOW(0)
000129 93e0 0503 	STS  _moving,R30
                 ; 0000 0109 
                 ; 0000 010A // Input/Output Ports initialization
                 ; 0000 010B // Port A initialization
                 ; 0000 010C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 010D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 010E PORTA=0x00;
00012b bbeb      	OUT  0x1B,R30
                 ; 0000 010F DDRA=0x00;
00012c bbea      	OUT  0x1A,R30
                 ; 0000 0110 
                 ; 0000 0111 // Port B initialization
                 ; 0000 0112 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0113 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0114 PORTB=0x00;
00012d bbe8      	OUT  0x18,R30
                 ; 0000 0115 DDRB=0x00;
00012e bbe7      	OUT  0x17,R30
                 ; 0000 0116 
                 ; 0000 0117 // Port C initialization
                 ; 0000 0118 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0119 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 011A PORTC=0x00;
00012f bbe5      	OUT  0x15,R30
                 ; 0000 011B DDRC=0x00;
000130 bbe4      	OUT  0x14,R30
                 ; 0000 011C 
                 ; 0000 011D // Port D initialization
                 ; 0000 011E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 011F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0120 PORTD=0x00;
000131 bbe2      	OUT  0x12,R30
                 ; 0000 0121 DDRD=0x00;
000132 bbe1      	OUT  0x11,R30
                 ; 0000 0122 
                 ; 0000 0123 // Port E initialization
                 ; 0000 0124 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0125 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0126 PORTE=0x00;
000133 b9e3      	OUT  0x3,R30
                 ; 0000 0127 DDRE=0x00;
000134 b9e2      	OUT  0x2,R30
                 ; 0000 0128 
                 ; 0000 0129 // Port F initialization
                 ; 0000 012A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 012B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 012C PORTF=0x00;
000135 93e0 0062 	STS  98,R30
                 ; 0000 012D DDRF=0x00;
000137 93e0 0061 	STS  97,R30
                 ; 0000 012E 
                 ; 0000 012F // Port G initialization
                 ; 0000 0130 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0131 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0132 PORTG=0x00;
000139 93e0 0065 	STS  101,R30
                 ; 0000 0133 DDRG=0x00;
00013b 93e0 0064 	STS  100,R30
                 ; 0000 0134 
                 ; 0000 0135 // Timer/Counter 0 initialization
                 ; 0000 0136 // Clock source: System Clock
                 ; 0000 0137 // Clock value: Timer 0 Stopped
                 ; 0000 0138 // Mode: Normal top=0xFF
                 ; 0000 0139 // OC0 output: Disconnected
                 ; 0000 013A ASSR=0x00;
00013d bfe0      	OUT  0x30,R30
                 ; 0000 013B TCCR0=0x00;
00013e bfe3      	OUT  0x33,R30
                 ; 0000 013C TCNT0=0x00;
00013f bfe2      	OUT  0x32,R30
                 ; 0000 013D OCR0=0x00;
000140 bfe1      	OUT  0x31,R30
                 ; 0000 013E 
                 ; 0000 013F // Timer/Counter 1 initialization
                 ; 0000 0140 // Clock source: System Clock
                 ; 0000 0141 // Clock value: Timer1 Stopped
                 ; 0000 0142 // Mode: Normal top=0xFFFF
                 ; 0000 0143 // OC1A output: Discon.
                 ; 0000 0144 // OC1B output: Discon.
                 ; 0000 0145 // OC1C output: Discon.
                 ; 0000 0146 // Noise Canceler: Off
                 ; 0000 0147 // Input Capture on Falling Edge
                 ; 0000 0148 // Timer1 Overflow Interrupt: Off
                 ; 0000 0149 // Input Capture Interrupt: Off
                 ; 0000 014A // Compare A Match Interrupt: Off
                 ; 0000 014B // Compare B Match Interrupt: Off
                 ; 0000 014C // Compare C Match Interrupt: Off
                 ; 0000 014D TCCR1A=0x00;
000141 bdef      	OUT  0x2F,R30
                 ; 0000 014E TCCR1B=0x00;
000142 bdee      	OUT  0x2E,R30
                 ; 0000 014F TCNT1H=0x00;
000143 bded      	OUT  0x2D,R30
                 ; 0000 0150 TCNT1L=0x00;
000144 bdec      	OUT  0x2C,R30
                 ; 0000 0151 ICR1H=0x00;
000145 bde7      	OUT  0x27,R30
                 ; 0000 0152 ICR1L=0x00;
000146 bde6      	OUT  0x26,R30
                 ; 0000 0153 OCR1AH=0x00;
000147 bdeb      	OUT  0x2B,R30
                 ; 0000 0154 OCR1AL=0x00;
000148 bdea      	OUT  0x2A,R30
                 ; 0000 0155 OCR1BH=0x00;
000149 bde9      	OUT  0x29,R30
                 ; 0000 0156 OCR1BL=0x00;
00014a bde8      	OUT  0x28,R30
                 ; 0000 0157 OCR1CH=0x00;
00014b 93e0 0079 	STS  121,R30
                 ; 0000 0158 OCR1CL=0x00;
00014d 93e0 0078 	STS  120,R30
                 ; 0000 0159 
                 ; 0000 015A // Timer/Counter 2 initialization
                 ; 0000 015B // Clock source: System Clock
                 ; 0000 015C // Clock value: Timer2 Stopped
                 ; 0000 015D // Mode: Normal top=0xFF
                 ; 0000 015E // OC2 output: Disconnected
                 ; 0000 015F TCCR2=0x00;
00014f bde5      	OUT  0x25,R30
                 ; 0000 0160 TCNT2=0x00;
000150 bde4      	OUT  0x24,R30
                 ; 0000 0161 OCR2=0x00;
000151 bde3      	OUT  0x23,R30
                 ; 0000 0162 
                 ; 0000 0163 // Timer/Counter 3 initialization
                 ; 0000 0164 // Clock source: System Clock
                 ; 0000 0165 // Clock value: Timer3 Stopped
                 ; 0000 0166 // Mode: Normal top=0xFFFF
                 ; 0000 0167 // OC3A output: Discon.
                 ; 0000 0168 // OC3B output: Discon.
                 ; 0000 0169 // OC3C output: Discon.
                 ; 0000 016A // Noise Canceler: Off
                 ; 0000 016B // Input Capture on Falling Edge
                 ; 0000 016C // Timer3 Overflow Interrupt: Off
                 ; 0000 016D // Input Capture Interrupt: Off
                 ; 0000 016E // Compare A Match Interrupt: Off
                 ; 0000 016F // Compare B Match Interrupt: Off
                 ; 0000 0170 // Compare C Match Interrupt: Off
                 ; 0000 0171 TCCR3A=0x00;
000152 93e0 008b 	STS  139,R30
                 ; 0000 0172 TCCR3B=0x00;
000154 93e0 008a 	STS  138,R30
                 ; 0000 0173 TCNT3H=0x00;
000156 93e0 0089 	STS  137,R30
                 ; 0000 0174 TCNT3L=0x00;
000158 93e0 0088 	STS  136,R30
                 ; 0000 0175 ICR3H=0x00;
00015a 93e0 0081 	STS  129,R30
                 ; 0000 0176 ICR3L=0x00;
00015c 93e0 0080 	STS  128,R30
                 ; 0000 0177 OCR3AH=0x00;
00015e 93e0 0087 	STS  135,R30
                 ; 0000 0178 OCR3AL=0x00;
000160 93e0 0086 	STS  134,R30
                 ; 0000 0179 OCR3BH=0x00;
000162 93e0 0085 	STS  133,R30
                 ; 0000 017A OCR3BL=0x00;
000164 93e0 0084 	STS  132,R30
                 ; 0000 017B OCR3CH=0x00;
000166 93e0 0083 	STS  131,R30
                 ; 0000 017C OCR3CL=0x00;
000168 93e0 0082 	STS  130,R30
                 ; 0000 017D 
                 ; 0000 017E // External Interrupt(s) initialization
                 ; 0000 017F // INT0: Off
                 ; 0000 0180 // INT1: Off
                 ; 0000 0181 // INT2: Off
                 ; 0000 0182 // INT3: Off
                 ; 0000 0183 // INT4: Off
                 ; 0000 0184 // INT5: Off
                 ; 0000 0185 // INT6: On
                 ; 0000 0186 // INT6 Mode: Any change
                 ; 0000 0187 // INT7: On
                 ; 0000 0188 // INT7 Mode: Any change
                 ; 0000 0189 EICRA=0x00;
00016a 93e0 006a 	STS  106,R30
                 ; 0000 018A EICRB=0x00;
00016c bfea      	OUT  0x3A,R30
                 ; 0000 018B EIMSK=0xC0;
00016d ece0      	LDI  R30,LOW(192)
00016e bfe9      	OUT  0x39,R30
                 ; 0000 018C EIFR=0xC0;
00016f bfe8      	OUT  0x38,R30
                 ; 0000 018D 
                 ; 0000 018E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 018F TIMSK=0x00;
000170 e0e0      	LDI  R30,LOW(0)
000171 bfe7      	OUT  0x37,R30
                 ; 0000 0190 
                 ; 0000 0191 ETIMSK=0x00;
000172 93e0 007d 	STS  125,R30
                 ; 0000 0192 
                 ; 0000 0193 // USART0 initialization
                 ; 0000 0194 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0195 // USART0 Receiver: On
                 ; 0000 0196 // USART0 Transmitter: On
                 ; 0000 0197 // USART0 Mode: Asynchronous
                 ; 0000 0198 // USART0 Baud Rate: 115200
                 ; 0000 0199 UCSR0A=0x00;
000174 b9eb      	OUT  0xB,R30
                 ; 0000 019A UCSR0B=0x18;
000175 e1e8      	LDI  R30,LOW(24)
000176 b9ea      	OUT  0xA,R30
                 ; 0000 019B UCSR0C=0x06;
000177 e0e6      	LDI  R30,LOW(6)
000178 93e0 0095 	STS  149,R30
                 ; 0000 019C UBRR0H=0x00;
00017a e0e0      	LDI  R30,LOW(0)
00017b 93e0 0090 	STS  144,R30
                 ; 0000 019D UBRR0L=0x05;
00017d e0e5      	LDI  R30,LOW(5)
00017e b9e9      	OUT  0x9,R30
                 ; 0000 019E 
                 ; 0000 019F // USART1 initialization
                 ; 0000 01A0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01A1 // USART1 Receiver: On
                 ; 0000 01A2 // USART1 Transmitter: On
                 ; 0000 01A3 // USART1 Mode: Asynchronous
                 ; 0000 01A4 // USART1 Baud Rate: 115200
                 ; 0000 01A5 UCSR1A=0x00;
00017f e0e0      	LDI  R30,LOW(0)
000180 93e0 009b 	STS  155,R30
                 ; 0000 01A6 UCSR1B=0x18;
000182 e1e8      	LDI  R30,LOW(24)
000183 93e0 009a 	STS  154,R30
                 ; 0000 01A7 UCSR1C=0x06;
000185 e0e6      	LDI  R30,LOW(6)
000186 93e0 009d 	STS  157,R30
                 ; 0000 01A8 UBRR1H=0x00;
000188 e0e0      	LDI  R30,LOW(0)
000189 93e0 0098 	STS  152,R30
                 ; 0000 01A9 UBRR1L=0x05;
00018b e0e5      	LDI  R30,LOW(5)
00018c 93e0 0099 	STS  153,R30
                 ; 0000 01AA 
                 ; 0000 01AB // Analog Comparator initialization
                 ; 0000 01AC // Analog Comparator: Off
                 ; 0000 01AD // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01AE ACSR=0x80;
00018e e8e0      	LDI  R30,LOW(128)
00018f b9e8      	OUT  0x8,R30
                 ; 0000 01AF SFIOR=0x00;
000190 e0e0      	LDI  R30,LOW(0)
000191 bde0      	OUT  0x20,R30
                 ; 0000 01B0 
                 ; 0000 01B1 // ADC initialization
                 ; 0000 01B2 // ADC disabled
                 ; 0000 01B3 ADCSRA=0x00;
000192 b9e6      	OUT  0x6,R30
                 ; 0000 01B4 
                 ; 0000 01B5 // SPI initialization
                 ; 0000 01B6 // SPI disabled
                 ; 0000 01B7 SPCR=0x00;
000193 b9ed      	OUT  0xD,R30
                 ; 0000 01B8 
                 ; 0000 01B9 // TWI initialization
                 ; 0000 01BA // TWI disabled
                 ; 0000 01BB TWCR=0x00;
000194 93e0 0074 	STS  116,R30
                 ; 0000 01BC 
                 ; 0000 01BD // Global enable interrupts
                 ; 0000 01BE #asm("sei")
000196 9478      	sei
                 ; 0000 01BF while (1)
                 _0x1F:
                 ; 0000 01C0       {
                 ; 0000 01C1         servo_func(500, 120);
000197 efe4      	LDI  R30,LOW(500)
000198 e0f1      	LDI  R31,HIGH(500)
000199 940e 01da 	CALL SUBOPT_0x3
                 ; 0000 01C2           delay_ms(800);
                 ; 0000 01C3         putchar1(positionLow);
00019b 91e0 0504 	LDS  R30,_positionLow
00019d 93ea      	ST   -Y,R30
00019e def0      	RCALL _putchar1
                 ; 0000 01C4         servo_func(180,120);
00019f ebe4      	LDI  R30,LOW(180)
0001a0 e0f0      	LDI  R31,HIGH(180)
0001a1 940e 01da 	CALL SUBOPT_0x3
                 ; 0000 01C5         delay_ms(800);
                 ; 0000 01C6       }
0001a3 cff3      	RJMP _0x1F
                 ; 0000 01C7 }
                 _0x22:
0001a4 cfff      	RJMP _0x22
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 getchar0:
0001a5 9b5f           sbis usr,rxc
0001a6 cffe           rjmp getchar0
0001a7 b1ec           in   r30,udr
0001a8 9508      	RET
                 _putchar:
                 putchar0:
0001a9 9b5d           sbis usr,udre
0001aa cffe           rjmp putchar0
0001ab 81e8           ld   r30,y
0001ac b9ec           out  udr,r30
                 _0x2060001:
0001ad 9621      	ADIW R28,1
0001ae 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _paket4:
000500           	.BYTE 0x1
                 _paket6:
000501           	.BYTE 0x1
                 _paket7:
000502           	.BYTE 0x1
                 _moving:
000503           	.BYTE 0x1
                 _positionLow:
000504           	.BYTE 0x1
                 _positionHigh:
000505           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0001af 940e 01a5 	CALL _getchar
0001b1 2ede      	MOV  R13,R30
0001b2 940e 01a5 	CALL _getchar
0001b4 2ece      	MOV  R12,R30
0001b5 940e 01a5 	CALL _getchar
0001b7 2eae      	MOV  R10,R30
0001b8 940e 01a5 	CALL _getchar
0001ba 93e0 0500 	STS  _paket4,R30
0001bc 940e 01a5 	CALL _getchar
0001be 2ebe      	MOV  R11,R30
0001bf 940c 01a5 	JMP  _getchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0001c1 2e9e      	MOV  R9,R30
0001c2 2de9      	MOV  R30,R9
0001c3 95e0      	COM  R30
0001c4 2e8e      	MOV  R8,R30
0001c5 940e 00b1 	CALL _blokiranje_prijema
0001c7 940e 00ad 	CALL _oslobadjanje_predaje
0001c9 efef      	LDI  R30,LOW(255)
0001ca 93ea      	ST   -Y,R30
0001cb 940e 01a9 	CALL _putchar
0001cd efef      	LDI  R30,LOW(255)
0001ce 93ea      	ST   -Y,R30
0001cf 940c 01a9 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0001d1 940e 01a9 	CALL _putchar
0001d3 928a      	ST   -Y,R8
0001d4 940e 01a9 	CALL _putchar
0001d6 940e 00a8 	CALL _blokiranje_predaje
0001d8 940c 00af 	JMP  _oslobadjanje_prijema
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0001da 93fa      	ST   -Y,R31
0001db 93ea      	ST   -Y,R30
0001dc e7e8      	LDI  R30,LOW(120)
0001dd e0f0      	LDI  R31,HIGH(120)
0001de 93fa      	ST   -Y,R31
0001df 93ea      	ST   -Y,R30
0001e0 940e 00b3 	CALL _servo_func
0001e2 e2e0      	LDI  R30,LOW(800)
0001e3 e0f3      	LDI  R31,HIGH(800)
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
0001e6 940c 01e8 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001e8 91e9      	ld   r30,y+
0001e9 91f9      	ld   r31,y+
0001ea 9630      	adiw r30,0
0001eb f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ec ec8d     +LDI R24 , LOW ( 0xACD )
0001ed e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0001ee 9701     +SBIW R24 , 1
0001ef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0001f0 95a8      	wdr
0001f1 9731      	sbiw r30,1
0001f2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001f3 9508      	ret
                 
                 __ASRW8:
0001f4 2fef      	MOV  R30,R31
0001f5 27ff      	CLR  R31
0001f6 fde7      	SBRC R30,7
0001f7 efff      	SER  R31
0001f8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   3 r7 :   3 
r8 :   2 r9 :   2 r10:   1 r11:   1 r12:   1 r13:   1 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  12 r25:   5 r26:   5 r27:   5 r28:   4 r29:   1 r30: 179 r31:  22 
x  :   3 y  :  63 z  :   7 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   3 
adiw  :   4 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  29 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   0 jmp   :  41 ld    :  20 ldd   :   4 
ldi   :  50 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  13 
movw  :   3 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  48 pop   :   0 push  :   0 rcall :  14 
ret   :  12 reti  :   1 rjmp  :   6 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   3 sbiw  :   5 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   1 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  42 std   :   0 sts   :  36 sub   :   0 subi  :   2 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 35 out of 117 (29.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003f2    966     44   1010  131072   0.8%
[.dseg] 0x000100 0x000506      0      6      6    4351   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 12 warnings
