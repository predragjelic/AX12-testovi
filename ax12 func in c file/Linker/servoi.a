;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <ax12func.h>
;
;#define sensor1 PINA.0
;#define sensor2 PINA.1
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#define TXC 6
;
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0030 char status,data;
; 0000 0031 while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 0032       {
; 0000 0033       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0034       data=UDR1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0035       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0036          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0037       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0038 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 003E {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003F while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040 UDR1=c;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;char moving, positionLow, positionHigh;
;
;  // External Interrupt 7 service routine
;interrupt [EXT_INT7] void ext_int7_isr(void)
; 0000 004B {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004C ax12_position_status(1);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004D putchar1(positionLow);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004E putchar1(positionHigh);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004F 
; 0000 0050 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;void main(void)
; 0000 0053 {
;PCODE: $00000040 VOL: 0
; 0000 0054 bit radi;
; 0000 0055 
; 0000 0056 // Input/Output Ports initialization
; 0000 0057 // Port A initialization
; 0000 0058 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0059 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005A PORTA=0x00;
;	radi -> R15.0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005B DDRA=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005C 
; 0000 005D // Port B initialization
; 0000 005E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0060 PORTB=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0061 DDRB=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0062 
; 0000 0063 // Port C initialization
; 0000 0064 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0065 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0066 PORTC=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0067 DDRC=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0068 
; 0000 0069 // Port D initialization
; 0000 006A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006C PORTD=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006D DDRD=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006E 
; 0000 006F // Port E initialization
; 0000 0070 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0071 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0072 PORTE=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0073 DDRE=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0074 
; 0000 0075 // Port F initialization
; 0000 0076 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0077 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0078 PORTF=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0079 DDRF=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007A 
; 0000 007B // Port G initialization
; 0000 007C // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007D // State4=T State3=T State2=T State1=T State0=T
; 0000 007E PORTG=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007F DDRG=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0080 
; 0000 0081 // Timer/Counter 0 initialization
; 0000 0082 // Clock source: System Clock
; 0000 0083 // Clock value: Timer 0 Stopped
; 0000 0084 // Mode: Normal top=0xFF
; 0000 0085 // OC0 output: Disconnected
; 0000 0086 ASSR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0087 TCCR0=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0088 TCNT0=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0089 OCR0=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008A 
; 0000 008B // Timer/Counter 1 initialization
; 0000 008C // Clock source: System Clock
; 0000 008D // Clock value: Timer1 Stopped
; 0000 008E // Mode: Normal top=0xFFFF
; 0000 008F // OC1A output: Discon.
; 0000 0090 // OC1B output: Discon.
; 0000 0091 // OC1C output: Discon.
; 0000 0092 // Noise Canceler: Off
; 0000 0093 // Input Capture on Falling Edge
; 0000 0094 // Timer1 Overflow Interrupt: Off
; 0000 0095 // Input Capture Interrupt: Off
; 0000 0096 // Compare A Match Interrupt: Off
; 0000 0097 // Compare B Match Interrupt: Off
; 0000 0098 // Compare C Match Interrupt: Off
; 0000 0099 TCCR1A=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009A TCCR1B=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 009B TCNT1H=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009C TCNT1L=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009D ICR1H=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009E ICR1L=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009F OCR1AH=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A0 OCR1AL=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A1 OCR1BH=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A2 OCR1BL=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A3 OCR1CH=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A4 OCR1CL=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00A5 
; 0000 00A6 // Timer/Counter 2 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: Timer2 Stopped
; 0000 00A9 // Mode: Normal top=0xFF
; 0000 00AA // OC2 output: Disconnected
; 0000 00AB TCCR2=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00AC TCNT2=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AD OCR2=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00AE 
; 0000 00AF // Timer/Counter 3 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: Timer3 Stopped
; 0000 00B2 // Mode: Normal top=0xFFFF
; 0000 00B3 // OC3A output: Discon.
; 0000 00B4 // OC3B output: Discon.
; 0000 00B5 // OC3C output: Discon.
; 0000 00B6 // Noise Canceler: Off
; 0000 00B7 // Input Capture on Falling Edge
; 0000 00B8 // Timer3 Overflow Interrupt: Off
; 0000 00B9 // Input Capture Interrupt: Off
; 0000 00BA // Compare A Match Interrupt: Off
; 0000 00BB // Compare B Match Interrupt: Off
; 0000 00BC // Compare C Match Interrupt: Off
; 0000 00BD TCCR3A=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00BE TCCR3B=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00BF TCNT3H=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C0 TCNT3L=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C1 ICR3H=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C2 ICR3L=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C3 OCR3AH=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C4 OCR3AL=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C5 OCR3BH=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00C6 OCR3BL=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00C7 OCR3CH=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00C8 OCR3CL=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00C9 
; 0000 00CA // External Interrupt(s) initialization
; 0000 00CB // INT0: Off
; 0000 00CC // INT1: Off
; 0000 00CD // INT2: Off
; 0000 00CE // INT3: Off
; 0000 00CF // INT4: Off
; 0000 00D0 // INT5: Off
; 0000 00D1 // INT6: On
; 0000 00D2 // INT6 Mode: Any change
; 0000 00D3 // INT7: On
; 0000 00D4 // INT7 Mode: Any change
; 0000 00D5 EICRA=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D6 EICRB=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D7 EIMSK=0xC0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D8 EIFR=0xC0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D9 
; 0000 00DA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DB TIMSK=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00DC 
; 0000 00DD ETIMSK=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DE 
; 0000 00DF // USART0 initialization
; 0000 00E0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E1 // USART0 Receiver: On
; 0000 00E2 // USART0 Transmitter: On
; 0000 00E3 // USART0 Mode: Asynchronous
; 0000 00E4 // USART0 Baud Rate: 115200
; 0000 00E5 UCSR0A=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E6 UCSR0B=0x18;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E7 UCSR0C=0x06;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E8 UBRR0H=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E9 UBRR0L=0x05;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00EA 
; 0000 00EB // USART1 initialization
; 0000 00EC // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00ED // USART1 Receiver: On
; 0000 00EE // USART1 Transmitter: On
; 0000 00EF // USART1 Mode: Asynchronous
; 0000 00F0 // USART1 Baud Rate: 115200
; 0000 00F1 UCSR1A=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00F2 UCSR1B=0x18;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F3 UCSR1C=0x06;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F4 UBRR1H=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F5 UBRR1L=0x05;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F6 
; 0000 00F7 // Analog Comparator initialization
; 0000 00F8 // Analog Comparator: Off
; 0000 00F9 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00FA ACSR=0x80;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00FB SFIOR=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00FC 
; 0000 00FD // ADC initialization
; 0000 00FE // ADC disabled
; 0000 00FF ADCSRA=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0100 
; 0000 0101 // SPI initialization
; 0000 0102 // SPI disabled
; 0000 0103 SPCR=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0104 
; 0000 0105 // TWI initialization
; 0000 0106 // TWI disabled
; 0000 0107 TWCR=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0108 
; 0000 0109 // Global enable interrupts
; 0000 010A #asm("sei")
;PCODE: $000000C5 VOL: 0
	sei
;PCODE: $000000C6 VOL: 0
; 0000 010B while (1)
;PCODE: $000000C7 VOL: 0
; 0000 010C       {
; 0000 010D         delay_ms(200);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 010E            radi=1;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 010F            ax12_goto(1, 192, 1023);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0110 
; 0000 0111            while(radi) {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0112                 if(sensor1){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0113                     ax12_position_status(1);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0114                     radi=0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0115                     putchar1(positionHigh);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0116                     putchar1(positionLow);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0117                     putchar1(0x13);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0118                     }
; 0000 0119            }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 011A 
; 0000 011B            delay_ms(200);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 011C            radi=1;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 011D            ax12_goto(1, 831, 1023);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 011E 
; 0000 011F          while(radi) {
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0120                 if(sensor1){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0121                     ax12_position_status(1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0122                     radi=0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0123                     putchar1(positionHigh);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0124                     putchar1(positionLow);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0125                     putchar1(0x13);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0126                     }
; 0000 0127            }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0128       }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0129 }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
